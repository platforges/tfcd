name: PR
on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize, reopened ]
  merge_group:
    types: [ checks_requested ]
permissions:
  id-token: write # configure-aws-credentials
  pull-requests: write # pr comment
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      tf: ${{ steps.filter.outputs.tf }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          tf: [ '*.(tf|tfvars)', '.terraform.locl.hcl', version ]

  pr-checks:
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/pass.yml

  build:
    name: Build
    uses: ./.github/workflows/build.yml

  terraform-checks:
    name: Terraform checks
    runs-on: ubuntu-latest
    needs: [ changes, build ]
    if: github.event_name == 'pull_request' && needs.changes.outputs.tf == 'true'
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.10.2
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::097614841487:role/GithubActionsRole
        aws-region: us-east-1
    - name: Terraform validations and plan
      run: |
        terraform init -input=false
        terraform validate
        terraform fmt -check
        terraform plan -input=false -out=tfplan -var 'hash=${{ needs.build.outputs.hash }}'
    - name: Post terraform plan to PR
      uses: borchero/terraform-plan-comment@v2
      with:
        token: ${{ github.token }}
        planfile: tfplan

  deploy-terraform:
    name: Deploy terraform
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'merge_group' && needs.build.result == 'success'
    continue-on-error: true
    environment: dev
    concurrency: deploy-main
    outputs:
      result: ${{ steps.apply.outputs.result }}
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.10.2
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::097614841487:role/GithubActionsRole
        aws-region: us-east-1
    - name: Terraform apply
      id: apply
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false -var 'hash=${{ needs.build.outputs.hash }}'
        if [ $? -ne 0 ]; then
          echo "Terraform apply failed. ðŸ”´"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "result=success" >> $GITHUB_OUTPUT

  sanity-test:
    name: Deployed sanity test
    runs-on: ubuntu-latest
    needs: deploy-terraform
    continue-on-error: true
    outputs:
      result: ${{ steps.sanity.outputs.result }}
    steps:
    - name: Simulate sanity check
      id: sanity
      run: |
        if [ "${{ needs.deploy-terraform.outputs.result }}" == "failure" ]; then
          echo "Deploy failed, skipping sanity test and blocking merge ðŸ”´"
          echo "result=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "result=success" >> $GITHUB_OUTPUT
        exit 0


  rollback-if-failed:
    name: Rollback & re-apply main
    runs-on: ubuntu-latest
    needs: [ deploy-terraform, sanity-test ]
    if:  needs.deploy-terraform.outputs.result == 'failure' || needs.sanity-test.outputs.result == 'failure'
    environment: dev
    concurrency: deploy-main
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.10.2
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::097614841487:role/GithubActionsRole
        aws-region: us-east-1
    - name: Terraform apply
      run: |
        terraform init -input=false
        terraform apply -input=false -auto-approve -var 'hash=main'
